<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">
<channel>
        <title>Baoming's blog</title>
        <description>Baoming's blog - Sun Baoming</description>
        <link>http://www.sunbaoming.cn</link>
        <link>http://www.sunbaoming.cn</link>
        <lastBuildDate>2020-02-21T21:54:03+08:00</lastBuildDate>
        <pubDate>2020-02-21T21:54:03+08:00</pubDate>
        <ttl>1800</ttl>


        <item>
                <title>如何gdb调试nginx</title>
                <description>
&lt;p&gt;#准备工作&lt;/p&gt;

&lt;p&gt;首先在编译nginx的时候需要把&lt;code&gt;--wtih-debug&lt;/code&gt;参数加上&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./configure --with-debug
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;#正常启动nginx&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/usr/local/nginx/sbin/nginx
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这种方式是默认启动nginx,也不修改&lt;code&gt;nginx.conf&lt;/code&gt;配置文件，这时候nginx会启动2个进程。一个master进程，一个worker进程。&lt;/p&gt;

&lt;p&gt;#启动调试&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://baoming.b0.upaiyun.com/assets/post/201406/gdb-1.png&quot; alt=&quot;start gdb&quot; /&gt;&lt;/p&gt;

&lt;p&gt;查看nginx的进程，并attach上进去&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(gdb)shell pidof nginx
(gdb)attach 12176
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;http://baoming.b0.upaiyun.com/assets/post/201406/gdb-2.png&quot; alt=&quot;attach gdb&quot; /&gt;&lt;/p&gt;

&lt;p&gt;因为我启了2个nginx进程，所以我这里有4个进程id,一般情况下只有2个，选那个大一点的，就是nginx worker进程。&lt;/p&gt;

&lt;p&gt;下面就是正常的设置断点，查看变量等正常操作了&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post/201406/gdb-3.png&quot; alt=&quot;breakpoint gdb&quot; /&gt;&lt;/p&gt;

&lt;p&gt;按&lt;code&gt;c&lt;/code&gt;继续执行，按&lt;code&gt;b&lt;/code&gt; 设置断点，按&lt;code&gt;Ctrl+C&lt;/code&gt;回到&lt;code&gt;(gdb)&lt;/code&gt;模式。按&lt;code&gt;detach&lt;/code&gt;退出debug.&lt;/p&gt;

&lt;p&gt;#其它方法和参考&lt;/p&gt;

&lt;p&gt;网上也有其它人总结了一些调试方式，个人认为还是这种方式更简单一点。参考文章：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://lenky.info/archives/2011/09/58&quot;&gt;利用gdb调试nginx&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/yjf512/archive/2012/05/10/2494635.html&quot;&gt;nginx模块_使用gdb调试nginx源码&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/evasnowind/archive/2010/11/07/1871324.html&quot;&gt;GDB命令详解&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
                <link>http://www.sunbaoming.cn/2014/06/08/%E5%A6%82%E4%BD%95gdb%E8%B0%83%E8%AF%95nginx</link>
                <guid>http://www.sunbaoming.cn/2014/06/08/如何gdb调试nginx</guid>
                <pubDate>2014-06-08T00:00:00+08:00</pubDate>
        </item>

        <item>
                <title>upyun云存储试用笔记</title>
                <description>
&lt;p&gt;#QuickStart&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;注册帐户，这个简单，访问&lt;a href=&quot;www.upyun.com&quot;&gt;www.upyun.com&lt;/a&gt;注册即可。&lt;/li&gt;
  &lt;li&gt;创建一个空间，设置一下空间的操作员，也就是可以上传管理文件的用户，这与注册帐户是分开的。空间的说法比老外的bucket好理解多了，虽然我认为本质上是同一个东西。&lt;/li&gt;
  &lt;li&gt;上传文件到空间，可以使用api上传、或者使用ftp上传。我测试的时候是使用github上的&lt;a href=&quot;https://github.com/upyun/python-sdk&quot;&gt;python sdk&lt;/a&gt;测试的，几分钟就完成了第一张图片的上传，api设计得也非常简捷、易用，好理解。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以下代码来源于python sdk工程下的demo，修改一下用户名（即空间管理里的操作员）、密码即。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post/201403/code-upyun.png&quot; alt=&quot;code demo upload&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;使用地址访问文件。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post/201403/url.png&quot; alt=&quot;visit url&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;done。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;#又拍云存储最吸引人的几个特色&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;简捷方便的Darsboard&lt;/em&gt;, 非常易用、好上手。支持的功能都在右侧直观地显示，操作方便快捷。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post/201403/dashboard.png&quot; alt=&quot;dashboard&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;空间支持FTP&lt;/em&gt;。这绝对是杀手级的特性，一般分布式存储都是不支持传统目录结构的文件名的，又拍在技术上做到了支持名字空间，底层又是分布式存储的，这在技术上应该下了很多功夫。我推断他们的ftp服务器都是自己实现的。这个特性为大量的网站历史数据迁移和平滑过渡到使用云存储和又拍的CDN， 没有额外的成本。这点我非常佩服。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post/201403/ftp.png&quot; alt=&quot;Ftp&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;图片空间支持自定义图片格式&lt;/em&gt;，最多支持达30种，基本上能满足大部分的网站需求。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post/201403/thumb.png&quot; alt=&quot;multisize image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;支持表单方式直接post到存储。这对提升用户体验非常有用。&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;流量统计&lt;/p&gt;

    &lt;p&gt;统计报表看上去是看小时统计的，图表很快就显示出来了。报表也做得非常直观，好用。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;#一点小问题&lt;/p&gt;

&lt;p&gt;在试用过程中，因为之前注册过，帐户忘记密码了，所以想通过邮箱找回密码，结果输入邮箱又说我邮箱没有激活；联系客服说后台可以激活邮箱，可是我又忘记密码了无法登录后台，所以如果你账户没有激活邮箱并且忘记密码的话，你就再也用不了这个帐户了。只能重新注册一个帐户。这点应该是一个小小的不足之处，为了安全或者运营考虑，关停帐号是可以的，但不能让用户无法登录，这等于是把用户续费的路都堵死了。希望可以改进。&lt;/p&gt;

&lt;p&gt;#其它&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;upyun使用空间+流量的计费模式，空间比较便宜，流量不太清楚，最少100G流量起卖，55元。可以单独购买流量。&lt;/li&gt;
  &lt;li&gt;以笔记类应用为例，个人的话，买个10G空间，100G流量，一年足够了，后台的交易管理里方便地计算出你要花多少钱，89.68元/年。还算是相当地便宜的。&lt;/li&gt;
  &lt;li&gt;技术方面的细节，没有过多的看，比如一份文件会存储到几个机房，会不会负载均衡，没有条件测试。&lt;/li&gt;
  &lt;li&gt;单独dig了一把访问外链的域名，dns只返回了一个IP的A记录，不知道是不是跟我没有购买流量有关。商业应用肯定是希望能有多个节点，容灾也好、失效转移也好。&lt;/li&gt;
  &lt;li&gt;总体来讲，这次体验upyun的服务使我对云存储和应用和国内的云存储发展水平有了一定的了解，又拍网整体上还是对使用者非常友好、功能也非常完善。可以打90分以上了。&lt;/li&gt;
  &lt;li&gt;不能再写了，不然别人以为我是又拍网的马甲了，在此申明，我真不是。信不信就由你了。&lt;/li&gt;
&lt;/ul&gt;

</description>
                <link>http://www.sunbaoming.cn/2014/03/31/upyun%E4%BA%91%E5%AD%98%E5%82%A8%E8%AF%95%E7%94%A8%E7%AC%94%E8%AE%B0</link>
                <guid>http://www.sunbaoming.cn/2014/03/31/upyun云存储试用笔记</guid>
                <pubDate>2014-03-31T00:00:00+08:00</pubDate>
        </item>


</channel>
</rss>
